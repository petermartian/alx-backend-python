#!/usr/bin/env bash
# kubctl-0x03: rolling update blue deployment to image v2.0 and probe for downtime.

set -euo pipefail

NS="default"
DEPLOY="messaging-app-blue"
SVC="messaging-app"
PORT=8000
ADDR="127.0.0.1:${PORT}"

command -v kubectl >/dev/null 2>&1 || { echo "❌ kubectl not found"; exit 1; }
command -v curl    >/dev/null 2>&1 || { echo "❌ curl not found"; exit 1; }

echo "🔌 Port-forwarding Service '${SVC}' to http://${ADDR} ..."
kubectl port-forward svc/${SVC} -n ${NS} ${PORT}:${PORT} >/tmp/kube_pf.log 2>&1 &
PF_PID=$!

cleanup() {
  echo -e "\n🧹 Cleaning up..."
  kill ${PF_PID} >/dev/null 2>&1 || true
  kill ${PROBE_PID} >/dev/null 2>&1 || true
}
trap cleanup EXIT

# give port-forward a moment
sleep 2

FAILS=0
TOTAL=0
echo "🧪 Starting continuous probe (HTTP GET /) while rolling update runs..."
(
  while true; do
    CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://${ADDR}/" || echo "000")
    TOTAL=$((TOTAL+1))
    if [ "$CODE" != "200" ]; then
      FAILS=$((FAILS+1))
      printf "x"  # mark a failure
    else
      printf "."
    fi
    sleep 0.5
  done
) &
PROBE_PID=$!

echo "🚀 Applying updated deployment (image v2.0)..."
kubectl apply -f messaging_app/blue_deployment.yaml

echo "⏳ Monitoring rollout..."
if kubectl rollout status deploy/${DEPLOY} -n ${NS} --timeout=300s; then
  echo -e "\n✅ Rollout complete."
else
  echo -e "\n⚠️ Rollout did not complete within timeout."
fi

# stop the probe
kill ${PROBE_PID} >/dev/null 2>&1 || true
echo -e "\n📊 Probe summary: total=${TOTAL}, failures=${FAILS}"

echo "📦 Current pods:"
kubectl get pods -l app=messaging-app -n ${NS} -o wide --show-labels
