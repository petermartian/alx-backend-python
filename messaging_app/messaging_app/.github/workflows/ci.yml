name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
          MYSQL_ROOT_PASSWORD: rootpass
        ports:
          - 3306:3306
        # Wait until MySQL is healthy
        options: >-
          --health-cmd="mysqladmin ping -h localhost -prootpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      DJANGO_SETTINGS_MODULE: messaging_app.settings
      # Adapt these to how your Django reads DB settings
      DB_NAME: test_db
      DB_USER: test_user
      DB_PASSWORD: test_pass
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        working-directory: messaging_app
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov flake8 coverage mysqlclient

      - name: Lint (flake8)
        working-directory: messaging_app
        run: flake8 .

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -prootpass --silent; then
              echo "MySQL is up"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Run tests with coverage
        working-directory: messaging_app
        run: |
          mkdir -p reports
          pytest --maxfail=1 -q --disable-warnings \
            --junitxml=reports/junit.xml \
            --cov=. --cov-report=xml:reports/coverage.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: messaging_app/reports
